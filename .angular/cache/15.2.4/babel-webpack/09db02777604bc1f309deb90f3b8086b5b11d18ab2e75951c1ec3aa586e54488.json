{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport class AuthInterceptor {\n  constructor(authSevice) {\n    this.authSevice = authSevice;\n  }\n  intercept(req, next) {\n    const authToken = this.authSevice.getToken();\n    const authRequest = req.clone({\n      headers: req.headers.set(\"Authorization\", \"Bearer \" + authToken)\n    });\n    return next.handle(authRequest);\n  }\n}\nAuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService));\n};\nAuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptor,\n  factory: AuthInterceptor.ɵfac\n});","map":{"version":3,"mappings":";;AAUA,OAAM,MAAOA,eAAe;EAC1BC,YAAoBC,UAAuB;IAAvB,eAAU,GAAVA,UAAU;EAAgB;EAC9CC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAChD,MAAMC,SAAS,GAAG,IAAI,CAACJ,UAAU,CAACK,QAAQ,EAAE;IAC5C,MAAMC,WAAW,GAAGJ,GAAG,CAACK,KAAK,CAAC;MAC5BC,OAAO,EAAEN,GAAG,CAACM,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,SAAS,GAAGL,SAAS;KAChE,CAAC;IACF,OAAOD,IAAI,CAACO,MAAM,CAACJ,WAAW,CAAC;EACjC;;AARWR,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAa,SAAfb,eAAe;AAAA","names":["AuthInterceptor","constructor","authSevice","intercept","req","next","authToken","getToken","authRequest","clone","headers","set","handle","factory"],"sourceRoot":"","sources":["/home/abhishek/WORK/TODO_MEAN/Frontend/src/app/auth/auth-interceptor.service.ts"],"sourcesContent":["import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { AuthService } from \"./auth.service\";\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private authSevice: AuthService) {}\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\n    const authToken = this.authSevice.getToken();\n    const authRequest = req.clone({\n      headers: req.headers.set(\"Authorization\", \"Bearer \" + authToken),\n    });\n    return next.handle(authRequest);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}