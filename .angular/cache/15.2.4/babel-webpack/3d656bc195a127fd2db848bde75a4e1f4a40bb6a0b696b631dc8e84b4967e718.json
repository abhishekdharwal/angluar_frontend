{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class TasksService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.tasks = [];\n    this.taskUpdated = new Subject();\n  }\n  getTask() {\n    this.http.get('http://localhost:3000/api/tasks').subscribe(taskData => {\n      this.tasks = taskData.data;\n      this.taskUpdated.next([...this.tasks]);\n    });\n    // return [...this.tasks];\n  }\n\n  getTaskUpdateListener() {\n    return this.taskUpdated.asObservable();\n  }\n  addTask(task) {\n    const taskData = new FormData();\n    taskData.append('title', task.title);\n    this.http.post('http://localhost:3000/api/tasks', task).subscribe(res => {\n      this.tasks.push(res.data);\n      this.taskUpdated.next([...this.tasks]);\n      this.router.navigate(['/']);\n    });\n  }\n  deleteTask(id) {\n    this.http.delete('http://localhost:3000/api/tasks/' + id).subscribe(res => {\n      this.tasks = this.tasks.filter(task => task._id !== id);\n      this.taskUpdated.next([...this.tasks]);\n    });\n  }\n  getTasks(id) {\n    return this.http.get('http://localhost:3000/api/tasks/' + id);\n  }\n  updateTask(task) {\n    this.http.put('http://localhost:3000/api/tasks/' + task._id, task).subscribe(res => {\n      console.log(res);\n      let index = this.tasks.findIndex(t => t._id == task._id);\n      if (index > -1) {\n        this.tasks[index] = task;\n        this.taskUpdated.next([...this.tasks]);\n      }\n      this.router.navigate(['/']);\n    });\n  }\n}\nTasksService.ɵfac = function TasksService_Factory(t) {\n  return new (t || TasksService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nTasksService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TasksService,\n  factory: TasksService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,OAAO,QAAoB,MAAM;;;;AAG1C,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAF5C,UAAK,GAAW,EAAE;IAClB,gBAAW,GAAG,IAAIJ,OAAO,EAAU;EACoB;EAC/DK,OAAO;IACL,IAAI,CAACF,IAAI,CACNG,GAAG,CAA+B,iCAAiC,CAAC,CACpEC,SAAS,CAAEC,QAAQ,IAAI;MACtB,IAAI,CAACC,KAAK,GAAGD,QAAQ,CAACE,IAAI;MAC1B,IAAI,CAACC,WAAW,CAACC,IAAI,CAAC,CAAC,GAAG,IAAI,CAACH,KAAK,CAAC,CAAC;IACxC,CAAC,CAAC;IACJ;EACF;;EACAI,qBAAqB;IACnB,OAAO,IAAI,CAACF,WAAW,CAACG,YAAY,EAAE;EACxC;EACAC,OAAO,CAACC,IAAU;IAChB,MAAMR,QAAQ,GAAG,IAAIS,QAAQ,EAAE;IAC/BT,QAAQ,CAACU,MAAM,CAAC,OAAO,EAAEF,IAAI,CAACG,KAAK,CAAC;IACpC,IAAI,CAAChB,IAAI,CACNiB,IAAI,CACH,iCAAiC,EACjCJ,IAAI,CACL,CACAT,SAAS,CAAEc,GAAQ,IAAI;MACtB,IAAI,CAACZ,KAAK,CAACa,IAAI,CAACD,GAAG,CAACX,IAAI,CAAC;MACzB,IAAI,CAACC,WAAW,CAACC,IAAI,CAAC,CAAC,GAAG,IAAI,CAACH,KAAK,CAAC,CAAC;MACtC,IAAI,CAACL,MAAM,CAACmB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;IAC7B,CAAC,CAAC;EACN;EACAC,UAAU,CAACC,EAAU;IACnB,IAAI,CAACtB,IAAI,CACNuB,MAAM,CAAC,kCAAkC,GAAGD,EAAE,CAAC,CAC/ClB,SAAS,CAAEc,GAAG,IAAI;MACjB,IAAI,CAACZ,KAAK,GAAG,IAAI,CAACA,KAAK,CAACkB,MAAM,CAAEX,IAAI,IAAKA,IAAI,CAACY,GAAG,KAAKH,EAAE,CAAC;MACzD,IAAI,CAACd,WAAW,CAACC,IAAI,CAAC,CAAC,GAAG,IAAI,CAACH,KAAK,CAAC,CAAC;IACxC,CAAC,CAAC;EACN;EACAoB,QAAQ,CAACJ,EAAU;IACjB,OAAO,IAAI,CAACtB,IAAI,CAACG,GAAG,CAClB,kCAAkC,GAAGmB,EAAE,CACxC;EACH;EACAK,UAAU,CAACd,IAAU;IACnB,IAAI,CAACb,IAAI,CACN4B,GAAG,CACF,kCAAkC,GAAGf,IAAI,CAACY,GAAG,EAC7CZ,IAAI,CACL,CACAT,SAAS,CAAEc,GAAQ,IAAI;MACtBW,OAAO,CAACC,GAAG,CAACZ,GAAG,CAAC;MAChB,IAAIa,KAAK,GAAG,IAAI,CAACzB,KAAK,CAAC0B,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAACR,GAAG,IAAIZ,IAAI,CAACY,GAAG,CAAC;MAC1D,IAAIM,KAAK,GAAG,CAAC,CAAC,EAAE;QACd,IAAI,CAACzB,KAAK,CAACyB,KAAK,CAAC,GAAGlB,IAAI;QACxB,IAAI,CAACL,WAAW,CAACC,IAAI,CAAC,CAAC,GAAG,IAAI,CAACH,KAAK,CAAC,CAAC;;MAExC,IAAI,CAACL,MAAM,CAACmB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;IAC7B,CAAC,CAAC;EACN;;AA1DWtB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAoC,SAAZpC,YAAY;EAAAqC,YADC;AAAM","names":["Subject","TasksService","constructor","http","router","getTask","get","subscribe","taskData","tasks","data","taskUpdated","next","getTaskUpdateListener","asObservable","addTask","task","FormData","append","title","post","res","push","navigate","deleteTask","id","delete","filter","_id","getTasks","updateTask","put","console","log","index","findIndex","t","factory","providedIn"],"sourceRoot":"","sources":["/home/abhishek/WORK/TODO_MEAN/Frontend/src/app/tasks/task.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Subject, Subscriber } from 'rxjs';\nimport { Task } from './task.model';\n@Injectable({ providedIn: 'root' })\nexport class TasksService {\n  private tasks: Task[] = [];\n  private taskUpdated = new Subject<Task[]>();\n  constructor(private http: HttpClient, private router: Router) {}\n  getTask() {\n    this.http\n      .get<{ status: {}; data: Task[] }>('http://localhost:3000/api/tasks')\n      .subscribe((taskData) => {\n        this.tasks = taskData.data;\n        this.taskUpdated.next([...this.tasks]);\n      });\n    // return [...this.tasks];\n  }\n  getTaskUpdateListener() {\n    return this.taskUpdated.asObservable();\n  }\n  addTask(task: Task) {\n    const taskData = new FormData();\n    taskData.append('title', task.title);\n    this.http\n      .post<{ status: {}; data: Task[] }>(\n        'http://localhost:3000/api/tasks',\n        task\n      )\n      .subscribe((res: any) => {\n        this.tasks.push(res.data);\n        this.taskUpdated.next([...this.tasks]);\n        this.router.navigate(['/']);\n      });\n  }\n  deleteTask(id: String) {\n    this.http\n      .delete('http://localhost:3000/api/tasks/' + id)\n      .subscribe((res) => {\n        this.tasks = this.tasks.filter((task) => task._id !== id);\n        this.taskUpdated.next([...this.tasks]);\n      });\n  }\n  getTasks(id: string) {\n    return this.http.get<{ status: {}; data: Task[] }>(\n      'http://localhost:3000/api/tasks/' + id\n    );\n  }\n  updateTask(task: Task) {\n    this.http\n      .put<{ status: {}; data: Task[] }>(\n        'http://localhost:3000/api/tasks/' + task._id,\n        task\n      )\n      .subscribe((res: any) => {\n        console.log(res);\n        let index = this.tasks.findIndex((t) => t._id == task._id);\n        if (index > -1) {\n          this.tasks[index] = task;\n          this.taskUpdated.next([...this.tasks]);\n        }\n        this.router.navigate(['/']);\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}