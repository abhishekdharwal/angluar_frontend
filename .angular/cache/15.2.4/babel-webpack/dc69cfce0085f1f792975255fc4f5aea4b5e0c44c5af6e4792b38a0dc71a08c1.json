{"ast":null,"code":"import { Subject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.token = null;\n    this.authStatus = false;\n    this.authStatusListener = new Subject();\n    this.tokenTimer = null;\n  }\n  createUser(authData) {\n    this.http.post(\"http://localhost:3000/api/users/signup\", authData).subscribe(res => {\n      console.log(res);\n      this.router.navigate([\"/\"]);\n    });\n  }\n  getAuthStatus() {\n    return this.authStatus;\n  }\n  getAuthStatusListener() {\n    return this.authStatusListener.asObservable();\n  }\n  getToken() {\n    return this.token;\n  }\n  autoAuthUser() {\n    const authInfo = this.getAuthData();\n    if (authInfo) {\n      this.token = authInfo.token;\n      this.authStatus = true;\n      const expiresIn = authInfo.expirationDate.getTime() - new Date.getTime();\n      this.tokenTimer = setTimeout(() => {\n        this.logout();\n      }, expiresIn * 1000);\n      this.authStatusListener.next(true);\n    }\n  }\n  loginUser(authData) {\n    this.http.post(\"http://localhost:3000/api/users/login\", authData).subscribe(res => {\n      console.log(res);\n      this.token = res.data.token;\n      const expiresIn = res.data.expiresIn;\n      if (this.token) {\n        this.tokenTimer = setTimeout(() => {\n          this.logout();\n        }, expiresIn * 1000);\n      }\n      const now = new Date();\n      const expirationDate = new Date(now.getTime() + expiresIn * 1000);\n      this.saveAuthData(this.token, expirationDate);\n      this.authStatus = true;\n      this.authStatusListener.next(true);\n      this.router.navigate([\"/\"]);\n    });\n  }\n  logout() {\n    this.token = null;\n    this.authStatus = false;\n    this.authStatusListener.next(false);\n    clearTimeout(this.tokenTimer);\n    this.clearAuthData();\n    this.router.navigate([\"/\"]);\n  }\n  saveAuthData(token, expirationDate) {\n    localStorage.setItem(\"token\", token);\n    localStorage.setItem(\"expiration\", expirationDate.toISOString());\n  }\n  clearAuthData() {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"expiration\");\n  }\n  getAuthData() {\n    const token = localStorage.getItem(\"token\");\n    const expirationDate = localStorage.getItem(\"expiration\");\n    if (token) {\n      return {\n        token: token,\n        expirationDate: new Date(expirationDate)\n      };\n    }\n    return null;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"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","names":["Subject","AuthService","constructor","http","router","createUser","authData","post","subscribe","res","console","log","navigate","getAuthStatus","authStatus","getAuthStatusListener","authStatusListener","asObservable","getToken","token","autoAuthUser","authInfo","getAuthData","expiresIn","expirationDate","getTime","Date","tokenTimer","setTimeout","logout","next","loginUser","data","now","saveAuthData","clearTimeout","clearAuthData","localStorage","setItem","toISOString","removeItem","getItem","factory","providedIn"],"sourceRoot":"","sources":["/home/abhishek/WORK/TODO_MEAN/Frontend/src/app/auth/auth.service.ts"],"sourcesContent":["import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { Subject } from \"rxjs\";\nimport { AuthData } from \"./auth-data.model\";\n\n@Injectable({ providedIn: \"root\" })\nexport class AuthService {\n  constructor(private http: HttpClient, private router: Router) {}\n  private token: string = null;\n  private authStatus = false;\n  private authStatusListener = new Subject<boolean>();\n  tokenTimer = null;\n  createUser(authData: AuthData) {\n    this.http\n      .post(\"http://localhost:3000/api/users/signup\", authData)\n      .subscribe((res: any) => {\n        console.log(res);\n        this.router.navigate([\"/\"]);\n      });\n  }\n  getAuthStatus() {\n    return this.authStatus;\n  }\n  getAuthStatusListener() {\n    return this.authStatusListener.asObservable();\n  }\n  getToken() {\n    return this.token;\n  }\n\n  autoAuthUser() {\n    const authInfo = this.getAuthData();\n    if (authInfo) {\n      this.token = authInfo.token;\n      this.authStatus = true;\n      const expiresIn = authInfo.expirationDate.getTime() - new Date.getTime();\n\n      this.tokenTimer = setTimeout(() => {\n        this.logout();\n      }, expiresIn * 1000);\n      this.authStatusListener.next(true);\n    }\n  }\n  loginUser(authData: AuthData) {\n    this.http\n      .post<{ status: {}; data: { token: string; expiresIn: number } }>(\n        \"http://localhost:3000/api/users/login\",\n        authData\n      )\n      .subscribe((res: any) => {\n        console.log(res);\n        this.token = res.data.token;\n        const expiresIn = res.data.expiresIn;\n        if (this.token) {\n          this.tokenTimer = setTimeout(() => {\n            this.logout();\n          }, expiresIn * 1000);\n        }\n        const now = new Date();\n        const expirationDate = new Date(now.getTime() + expiresIn * 1000);\n        this.saveAuthData(this.token, expirationDate);\n        this.authStatus = true;\n        this.authStatusListener.next(true);\n        this.router.navigate([\"/\"]);\n      });\n  }\n  logout() {\n    this.token = null;\n    this.authStatus = false;\n    this.authStatusListener.next(false);\n    clearTimeout(this.tokenTimer);\n    this.clearAuthData();\n\n    this.router.navigate([\"/\"]);\n  }\n  private saveAuthData(token: string, expirationDate: Date) {\n    localStorage.setItem(\"token\", token);\n    localStorage.setItem(\"expiration\", expirationDate.toISOString());\n  }\n  private clearAuthData() {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"expiration\");\n  }\n  private getAuthData() {\n    const token = localStorage.getItem(\"token\");\n    const expirationDate = localStorage.getItem(\"expiration\");\n    if (token) {\n      return { token: token, expirationDate: new Date(expirationDate) };\n    }\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}